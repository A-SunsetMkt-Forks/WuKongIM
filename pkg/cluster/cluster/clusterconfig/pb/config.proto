syntax = "proto3";
option go_package = "./;pb";


enum NodeRole {
    NodeRoleUnkown = 0; // 未知
    NodeRoleLeader = 1; // 领导者
    NodeRoleFollower = 2; // 跟随者
    NodeRoleLearner =3; // 学习者 （没有投票权）
}

enum NodeStatus {
    NodeStatusUnkown = 0; // 等待初始化
    NodeStatusDone = 1;
}
message Config {
    uint32 version = 1; // 配置版本
    uint32 slotCount = 2; // 槽位数量
    uint32 term = 3; // 领导任期
    repeated Node nodes = 4; // 集群中的节点
    repeated Slot slots = 5; // 集群中的槽位
 }


message Node {
    uint64 id = 1; // 节点id
    string slots = 2; // 节点负责的槽位（也是领导槽位）
    string replicaSlots = 3; // 节点负责的副本槽位（不包含领导槽位）
    bool join = 4; // 是否是加入集群的节点，false表示初始节点 true表示后面新加入的节点
    repeated SlotMigrate exports = 5; // 正在迁移的槽位
    repeated SlotMigrate imports = 6; // 正在迁入的槽位
    NodeStatus status = 7; // 节点状态
    bool online = 8; // 是否在线
    uint32 offlineCount = 9; // 离线次数
    bool allowVote = 10; // 节点是否允许投票
    uint32 dataTerm = 11; // 节点数据任期, 用于判断频道集群数据是否过期，节点重启后，数据任期会变大
    NodeRole role = 12; // 节点角色
    bytes extra = 13; // 节点扩展数据
}


message Slot {
    uint32 id = 1; // 槽位id
    uint64 leader = 2; // 槽位的领导节点
    uint32 term = 3; // 槽位的领导任期
    repeated uint64 replicas = 4; // 副本节点(包含领导节点)
    uint32 status = 5; // 槽位状态
    uint32 replicaCount = 6; // 槽位副本数量  (这个数量包含领导，比如副本为3，则是1个领导2个副本节点)
}


message SlotMigrate {
    uint32 slot = 1; // 槽位id
    uint64 from = 2; // 迁移的源节点
    uint64 to = 3; // 迁移的目标节点
    uint32 status = 4; // 迁移状态
}
