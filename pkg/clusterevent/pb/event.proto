syntax = "proto3";
option go_package = "./;pb";

enum ClusterEventType {
    ClusterEventTypeNone = 0;
    ClusterEventTypeVersionChange= 1; // 集群配置版本已改变
}

enum SlotEventType {
    SlotEventTypeNone = 0;
    SlotEventTypeInit = 1; // 节点领导触发
    SlotEventTypeAdd = 2;
    SlotEventTypeRemove = 3;
    SlotEventTypeElection = 4; // 槽选举
}

enum NodeEventType {
    NodeEventTypeNone = 0;
    NodeEventTypeInit = 1;
    NodeEventTypeAdd = 2;
    NodeEventTypeRemove = 3;
}

enum NodeStatus {
    NodeStatusWaitInit = 0; // 等待初始化
    NodeStatusDone = 1;
}


message Cluster {
   uint32 version = 1; // 配置版本
   uint32 slotCount = 2; // 槽位数量
   uint32 epoch = 3; // 集群的周期
   repeated Node nodes = 4; // 集群中的节点
   repeated Slot slots = 5; // 集群中的槽位
}

message Node {
    uint64 id = 1; // 节点id
    string clusterAddr = 2; // 节点分布式通讯地址
    string apiAddr  = 3; // 节点api地址
    string slots = 4; // 节点负责的槽位（也是领导槽位）
    string replicaSlots = 5; // 节点负责的副本槽位（不包含领导槽位）
    bool join = 6; // 是否是加入集群的节点，false表示初始节点 true表示加入节点
    repeated SlotMigrate exports = 7; // 正在迁移的槽位
    repeated SlotMigrate imports = 8; // 正在迁入的槽位
    NodeStatus status = 9; // 节点状态
    bool online = 10; // 是否在线
}


message Slot {
    uint32 id = 1; // 槽位id
    uint64 leader = 2; // 槽位的领导节点
    repeated uint64 replicas = 3; // 副本节点(包含领导节点)
    uint32 status = 4; // 槽位状态
    uint32 replicaCount = 5; // 槽位副本数量  (这个数量包含领导，比如副本为3，则是1个领导2个副本节点)
}

message SlotMigrate {
    uint32 slot = 1; // 槽位id
    uint64 from = 2; // 迁移的源节点
    uint64 to = 3; // 迁移的目标节点
    uint32 status = 4; // 迁移状态
}


message NodeEvent {
    NodeEventType eventType = 1; // 事件类型
    repeated Node node = 2; // 对应事件的节点
}


message SlotEvent {
    SlotEventType eventType = 1; // 事件类型
    repeated Slot slots = 2; // 对应事件的槽位
    repeated uint32 slotIDs = 3; // 槽位id集合
}
